1. -----Создание веб-сайта на Java-----
Для того чтобы создать Spring проект, нужно зайти на сайт-конструктор start.spring.io - Artifact-id означает название корневой папки(проекта), Group-id - папка(/папки), в которых хранится код
Скачиваем архив и распаковываем его
MVC - Model-View-Controller - схема проектирования, позволяющая разбить все файлы на три категории: модели, шаблоны и контроллеры
В контроллерах происходит отслеживание url-адресов и их переходов, контроллер может обращаться к модели, которая к чему-то относится(БД, тд...)
Шаблон - определенный вид сайта, который показывается пользователю(в html, css виде)
Пока что это сырой проект: чтобы он запускался, нужно перейти на сайт spring.io в раздел "Guides", ввести "mvc", перейти по ссылке и оттуда скопировать все зависимости в pom.xml, удалив старые
Нажимаем на кнопку "Синхронизировать файлы" внизу в VSCode
2. -----Главная страница сайта-----
Проект есть, однако в нем нет ни одного шаблона
Все еще используем официальную документацию (ссылка с предыдущего урока)
Первый делом надо создать шаблон главной страницы: для этого в Group-id(папка, в которой есть main) создаем папку "templates", в ней создаем файл "MainController.java"(всё можно называть как угодно), копируем в него текст с контроллера "Create a Web Controller"
В параметрах функции убираем аннотацию, оставляем только Model
В аннотации @GetMapping указывается обрабатываемый url-адрес
Эта функция нужна для последующей обработки перехода url-страницы в html - файле - из этой функции мы возвращаем строку с названием шаблона страницы (без .html), потом нужно будет создать шаблон с таким названием
В документации есть пример шаблона с последующим его расположением: в теле <body> есть строка "Hello, <параметр>": вместо параметра нужно вставить переменную, которую изначально вставили в модель контроллера
Проект готов: чтобы его запустить переходим в BlogApplication и нажимаем Debug, а потом Run либо любую другую кнопку запуска (если нет IDE, то нужно создавать проект maven самостоятельно, а я не хочу, так что обойдусь так)
Если ничего не заработало, это означает, что порт 8080 используется другой веб-страницей, значит надо перенаправить localhost: заходим в ..resourses/templates/application.propoerties и пишем в нем "server.port = 8081". Компилируем заново
Для просмотра веб-сайта заходим в браузер и пишем в строке поиска "localhost:8081"
На этом этапе сайт выглядит убого, поэтому вместо писанины на html можно использовать готовые шаблоны: заходим на getbootstrap.com(содержит множество готовых html, css, js стилей), вкладка "examples", заходим в понравившийся шаблон, открываем панель разработчика, с помощью указателя копируем код шапки и содержимого страницы, пихаем в <body>. Видим, что страница высвечивается без каких-либо стилей: это логично, так как мы не подключали никаких стилей.
Чтобы включить css, заходим на bootstrapcdn.com, копируем первую строку, в теге <head> прописываем тег <link>(vscode автодополняет его) и вставляем эту строку в атрибут href
Потом так же копируем основную часть и вставляем html код
Пока что мы отслеживаем только главную страницу
3. -----Разработка раздела "Блог"-----
Для новой страницы нужно добавить новый контроллер, прописываем аннотацию @Controller, затем @GetMapping("отслеживаемый url страницы, на которую нужно перейти")
Внутри функции принимаем Model model, возвращаем название веб-страницы в виде строки и создаем шаблон с таким же названием в html
Предполагается, что на любой странице должен быть повторяющийся элемент, например, шапка сайта или футер
Повторяющиеся секции лучше всего выносить в отдельные шаблоны(файлы html), так как во-первых, так проще их импортировать, а во-вторых, так проще вносить изменения, чтобы вносить изменения в один файл, а не во все остальные
Для этого создаем в templates папку, например, "blocks": там будут храниться все секции, там создаем header.html, в него копируем шапку: надо также указать, что этот шаблон является вставляемым (<div th:fragment = "header">...</div>), а потом в <body> вставляем примерно вот это: <header th:insert="blocks/header :: header"></header>(тэг может быть не только header)(надо изучить thymeleaf)
Кстати, в href шапки можно менять ссылки
4. -----Работа с БД MySQL. Создание модели-----
Для того чтобы подключить необходимые зависимости для подключения к БД, заходим в pom.xml, копируем оттуда любую зависимость с <scope>runtime</scope> и меняем только <artifactId>spring-boot-starter-data-jpa</artifactId> - мы подключили jpa, осталось подключить коннектор
Снова вставляем зависимость и исправляем на <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId>, <scope> оставляем таким же
Теперь нужно указать само подключение к БД: заходим в application.properties, затем переходим по ссылке spring.io/guides, прописываем mysql в строке поиска, переходим по ней и копируем строки из документации
Меняем данные, как хотим
